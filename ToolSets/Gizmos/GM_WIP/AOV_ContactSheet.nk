Group {
 name AOV_ContactSheet1
 selected true
 addUserKnob {20 User l AOV}
 addUserKnob {26 grid_settings l "<b>Grid Settings"}
 addUserKnob {41 rows l "Rows & Columns" +INVISIBLE T proxy.rows}
 addUserKnob {41 columns l Columns -STARTLINE +INVISIBLE T proxy.columns}
 addUserKnob {41 border l "Border Thickness" T proxy.border}
 addUserKnob {7 format_scale l Scale R 0.1 1}
 format_scale 1
 addUserKnob {22 match_input_res l "<b>Match Input Res" t "Sets the Scale slider so that the output resolution is matching with the input's which depends on the grid scale. Therefore, if the grid scale is changing the Scale need to be adjusted." -STARTLINE T "this_node = nuke.thisNode()\nif this_node.dependencies():\n    with nuke.thisGroup():\n        new_scale = nuke.toNode('proxy')\['scale'].value()\n        grid_val = nuke.toNode('proxy')\['grid_val'].value()\n    if not grid_val == 0:\n        this_node\['format_scale'].setValue(new_scale)\n    else:\n        this_node\['format_scale'].setValue(1)\nelse:\n    this_node\['format_scale'].setValue(1)"}
 addUserKnob {26 text_settings l "<b>Text Settings"}
 addUserKnob {41 text_pos l "Text Position" T proxy.text_pos}
 addUserKnob {41 font_scale l "Font Scale" T proxy.font_scale}
 addUserKnob {41 background l Background T proxy.background}
 addUserKnob {41 bg_color l "BG Color" T proxy.bg_color}
 addUserKnob {41 bg_opacity l "BG Opacity" T proxy.bg_opacity}
 addUserKnob {26 layers l <b>Layers}
 addUserKnob {22 populate l "<b>Populate Layers" t "Connect your node that has multiple AOVs.\nBuilding the setup and adding the user knobs takes some time depending the numbr of AOVs and their resolution." T "#################################\n### AOV LIST ###\n#################################\n\nX_DIST = int(nuke.toNode('preferences')\['GridWidth'].value())\nY_DIST = int(nuke.toNode('preferences')\['GridHeight'].value())\nTHIS_GROUP = nuke.thisNode()\nSELECT_VAL = True\n\nif len(THIS_GROUP.dependencies()) == 0:\n    nuke.message('<font color=orange><h3><center>Connect a node with AOVs first')\nelse:\n    # getting layer info\n    this_channels = THIS_GROUP.input(0).channels()\n    if not this_channels:\n        nuke.message('<font color=orange><h3><center>No channels found')\n    else:\n        layersList = \[]\n        for rawChannels in this_channels:\n            splitRawChannels = rawChannels.split('.')\n            layersList.append(splitRawChannels\[0])\n        channelLayers = list(set(layersList))\n        channelLayers.sort()\n        channel_num = (len(channelLayers))\n\n        if channel_num < 2:\n            nuke.message('<font color=orange><h3><center>Only found:\\n<i>' + str(channelLayers\[0]) + '</i>\\nNeed more layers to work!')\n        else:\n            # deleting all user knobs for safety\n            for k in THIS_GROUP.knobs():\n                try:\n                    if k.startswith(TMP_PREFIX):\n                        THIS_GROUP.removeKnob(THIS_GROUP\[k])\n                except:\n                    pass\n            for k in THIS_GROUP.knobs():\n                try:\n                    if k.startswith(TMP_PREFIX):\n                        THIS_GROUP.removeKnob(THIS_GROUP\[k])\n                except:\n                    pass\n            for k in THIS_GROUP.knobs():\n                try:\n                    if k.startswith(TMP_PREFIX):\n                        THIS_GROUP.removeKnob(THIS_GROUP\[k])\n                except:\n                    pass\n\n            # setting all layer knobs visible\n            THIS_GROUP\['enable_all_layers'].setVisible(True)\n            THIS_GROUP\['disable_all_layers'].setVisible(True)\n\n            with THIS_GROUP:\n                # deleting all tmp nodes for safety\n                for n in nuke.allNodes():\n                    try:\n                        n_name = n\['name'].value()\n                        if n_name.startswith(TMP_PREFIX):\n                            nuke.delete(n)\n                    except:\n                        pass\n                \n                # assigning node variables\n                proxy = nuke.toNode('proxy')\n                start_dot = dot = nuke.toNode('START_DOT')\n                crop_to_format = nuke.toNode('Crop_TO_FORMAT')\n                end_dot = nuke.toNode('END_DOT')\n                reformat_to_scale = nuke.toNode('Reformat_TO_SCALE')\n                output = nuke.toNode('Output1')\n                TMP_PREFIX = \"tmp_\"\n                # setting initial layer number\n                proxy\['aov_num'].clearAnimated()\n                proxy\['aov_num'].setValue(channel_num)\n\n                layer_list_expression = \[]\n\n                for index, n in enumerate(channelLayers):\n                    # creating dot\n                    newX = dot\['xpos'].value()\n                    newY = dot\['ypos'].value()\n                    oldDot = dot\n                    dot = nuke.nodes.Dot()\n                    dot\['name'].setValue(\"\{0\}Dot_\{1\}\".format(TMP_PREFIX, (index + 1)))\n                    dot\['xpos'].setValue(int(newX) + (X_DIST * 3))\n                    dot\['ypos'].setValue(newY)\n                    dot.setSelected(SELECT_VAL)\n                    newDot = dot\n                    newDot.setInput(0, oldDot)\n\n                    # creating shuffle\n                    shuffle = nuke.nodes.Shuffle2()\n                    shuffle\['in1'].setValue(n)\n                    shuffle\['label'].setValue(n)\n                    shuffle\['xpos'].setValue(int(dot\['xpos'].value()) - 39)\n                    shuffle\['ypos'].setValue(int(dot\['ypos'].value()) + (Y_DIST * 3))\n                    shuffle.setSelected(SELECT_VAL)\n                    shuffle.setInput(0, newDot)\n                    shuffle\['name'].setValue(\"\{0\}Shuffle_\{1\}\".format(TMP_PREFIX, index + 1))\n\n                    # creating remove\n                    remove = nuke.nodes.Remove()\n                    remove\['operation'].setValue('remove')\n                    remove\['channels'].setValue('all')\n                    remove\['xpos'].setValue(int(shuffle\['xpos'].value()) - 110)\n                    remove\['ypos'].setValue(int(shuffle\['ypos'].value()))\n                    remove.setSelected(SELECT_VAL)\n                    remove.setInput(0, shuffle)\n                    remove\['name'].setValue(\"\{0\}Remove_\{1\}\".format(TMP_PREFIX, index + 1))\n\n                    # creating text\n                    text = nuke.nodes.Text2()\n                    text\['message'].setValue('\[value input.input.in1]')\n                    text\['box'].setExpression('input.format.x+(input.format.r*.03)', 0)\n                    text\['box'].setExpression('input.format.y + (input.format.t*.03)', 1)\n                    text\['box'].setExpression('input.format.r-(input.format.r*.03)', 2)\n                    text\['box'].setExpression('input.format.t-(input.format.t*.03)', 3)\n                    text\['xjustify'].setExpression(\"proxy.text_pos == 0 || proxy.text_pos == 2 ? 0 :2\")\n                    text\['yjustify'].setExpression(\"proxy.text_pos == 2 || proxy.text_pos == 3 ? 2 :0\")\n                    text\['global_font_scale'].setExpression('proxy.font_scale')\n                    text\['enable_background'].setExpression('proxy.background')\n                    text\['background_color'].setExpression('proxy.bg_color')\n                    text\['background_opacity'].setExpression('proxy.bg_opacity')\n                    text\['xpos'].setValue(int(remove\['xpos'].value()))\n                    text\['ypos'].setValue(int(shuffle\['ypos'].value()) + 54)\n                    text.setSelected(SELECT_VAL)\n                    text.setInput(0, remove)\n                    text\['name'].setValue(\"\{0\}Text_\{1\}\".format(TMP_PREFIX, index + 1))\n\n                    # creating merge_text\n                    merge_text = nuke.nodes.Merge2()\n                    merge_text\['xpos'].setValue(int(shuffle\['xpos'].value()))\n                    merge_text\['ypos'].setValue(int(shuffle\['ypos'].value()) + 54)\n                    merge_text.setSelected(SELECT_VAL)\n                    merge_text.setInput(0, shuffle)\n                    merge_text.setInput(1, text)\n                    merge_text\['name'].setValue(\"\{0\}Merge_Text_\{1\}\".format(TMP_PREFIX, index + 1))\n\n                    # creating grid\n                    grid = nuke.nodes.Grid()\n                    grid\['number'].setValue(1)\n                    grid\['size'].setExpression('proxy.border')\n                    grid\['xpos'].setValue(int(merge_text\['xpos'].value()))\n                    grid\['ypos'].setValue(int(merge_text\['ypos'].value()) + 108)\n                    grid.setSelected(SELECT_VAL)\n                    grid.setInput(0, merge_text)\n                    grid\['name'].setValue(\"\{0\}Grid_\{1\}\".format(TMP_PREFIX, index + 1))\n\n                    # creating transform\n                    transform = nuke.nodes.Transform()\n                    k1 = nuke.Int_Knob('index_num', 'index_num')\n                    transform.addKnob(k1)\n                    k2 = nuke.Int_Knob('grid_size', 'grid_size')\n                    transform.addKnob(k2)\n                    transform\['grid_size'].setExpression(\"proxy.grid_val\")\n                    transform\['index_num'].setValue(index + 1)\n                    transform\['center'].setExpression(\n                        \"\"\"\[if \{\[expr \[value this.index_num] % \[value this.grid_size]]==0\} \{return \[value this.grid_size]\} \{return \[expr \[value this.index_num] % \[value this.grid_size]]\}]\"\"\",\n                        0)\n                    transform\['center'].setExpression(\"\"\"grid_size-(ceil ( index_num/ grid_size )) +1\"\"\", 1)\n                    transform\['translate'].setExpression(\"input.width*\[value center.0]-input.width\", 0)\n                    transform\['translate'].setExpression(\"input.height*\[value center.1]-input.height\", 1)\n                    transform\['xpos'].setValue(int(grid\['xpos'].value()))\n                    transform\['ypos'].setValue(int(grid\['ypos'].value()) + 108)\n                    transform.setSelected(SELECT_VAL)\n                    transform.setInput(0, grid)\n                    transform\['name'].setValue(\"\{0\}Transform_\{1\}\".format(TMP_PREFIX, index + 1))\n\n                    # creating dot\n                    corner_dot = nuke.nodes.Dot()\n                    corner_dot\['xpos'].setValue(int(transform\['xpos'].value()) + 39)\n                    corner_dot\['ypos'].setValue(int(transform\['ypos'].value()) + ((Y_DIST * 8) * (index + 2)))\n                    corner_dot.setSelected(SELECT_VAL)\n                    corner_dot.setInput(0, transform)\n                    corner_dot\['name'].setValue(\"\{0\}Corner_Dot_\{1\}\".format(TMP_PREFIX, index + 1))\n\n                    # creating merge\n                    if not index == 0:\n                        old_merge = merge\n                    merge = nuke.nodes.Merge2()\n                    merge_name = merge\['name'].value()\n                    merge\['xpos'].setValue(int(crop_to_format\['xpos'].value()))\n                    merge\['ypos'].setValue(int(corner_dot\['ypos'].value()))\n                    merge\['label'].setValue(n)\n                    merge.setSelected(SELECT_VAL)\n                    merge.setInput(1, corner_dot)\n                    merge\['name'].setValue(\"\{0\}Merge_\{1\}\".format(TMP_PREFIX, index + 1))\n                    merge_name = merge\['name'].value()\n\n                    # appending layer list\n                    layer_list_expression.append(\"\"\"\[if \{\[value \"\"\" + merge_name + \"\"\".disable]==true\} \{return 0\} \{return 1\}]\"\"\")\n\n                    # defining expression for index numbers on transform\n                    transform\['index_num'].setExpression(('\\n+\\n'.join(layer_list_expression)))\n\n                    # connecting merge's B inputs\n                    if index == 0:\n                        merge.setInput(0, crop_to_format)\n                    else:\n                        new_merge = merge\n                        new_merge.setInput(0, old_merge)\n\n                    # adding checkbox knobs\n                    knob = nuke.Boolean_Knob(TMP_PREFIX + n, n)\n                    knob.setFlag(nuke.STARTLINE)\n                    tg_name = THIS_GROUP\['name'].value()\n\n                    if n.startswith('C_'):\n                        if not channelLayers\[index - 1].startswith('C_'):\n                            begin_color_group = nuke.Tab_Knob('tmp_begin_color', 'Color Group', nuke.TABBEGINGROUP)\n                            THIS_GROUP.addKnob(begin_color_group)\n                            code = \"\"\"for k in nuke.thisNode().knobs():\n                if k.startswith(\"tmp_C_\"):\n                    nuke.thisNode()\[k].setValue(True)\"\"\"\n                            enable_color_group = nuke.PyScript_Knob('tmp_enable_color_group', 'Enable Color Group', code)\n                            THIS_GROUP.addKnob(enable_color_group)\n                            code = \"\"\"for k in nuke.thisNode().knobs():\n                if k.startswith(\"tmp_C_\"):\n                    nuke.thisNode()\[k].setValue(False)\"\"\"\n                            disable_color_group = nuke.PyScript_Knob('tmp_disable_color_group', 'Disable Color Group', code)\n                            THIS_GROUP.addKnob(disable_color_group)\n                        THIS_GROUP.addKnob(knob)\n                        THIS_GROUP\[TMP_PREFIX + n].setValue(True)\n                        if not channelLayers\[index + 1].startswith('C_'):\n                            end_color_group = nuke.Tab_Knob('tmp_end_color_group', None, nuke.TABENDGROUP)\n                            THIS_GROUP.addKnob(end_color_group)\n\n                    elif n.startswith('ID'):\n                        if not channelLayers\[index - 1].startswith('ID'):\n                            begin_id_group = nuke.Tab_Knob('tmp_id_group', 'ID Group', nuke.TABBEGINGROUP)\n                            THIS_GROUP.addKnob(begin_id_group)\n                            code = \"\"\"for k in nuke.thisNode().knobs():\n                if k.startswith(\"tmp_ID\"):\n                    nuke.thisNode()\[k].setValue(True)\"\"\"\n                            enable_id_group = nuke.PyScript_Knob('tmp_enable_id_group', 'Enable ID Group', code)\n                            THIS_GROUP.addKnob(enable_id_group)\n                            code = \"\"\"for k in nuke.thisNode().knobs():\n                if k.startswith(\"tmp_ID\"):\n                    nuke.thisNode()\[k].setValue(False)\"\"\"\n                            disable_id_group = nuke.PyScript_Knob('tmp_disable_id_group', 'Disable ID Group', code)\n                            THIS_GROUP.addKnob(disable_id_group)\n                        THIS_GROUP.addKnob(knob)\n                        THIS_GROUP\[TMP_PREFIX + n].setValue(True)\n                        if not channelLayers\[index + 1].startswith('ID'):\n                            end_id_group = nuke.Tab_Knob('tmp_end_id_group', None, nuke.TABENDGROUP)\n                            THIS_GROUP.addKnob(end_id_group)\n\n                    elif n.startswith('M_'):\n                        if not channelLayers\[index - 1].startswith('M_'):\n                            begin_material_group = nuke.Tab_Knob('tmp_material_group', 'Material Group', nuke.TABBEGINGROUP)\n                            THIS_GROUP.addKnob(begin_material_group)\n                            code = \"\"\"for k in nuke.thisNode().knobs():\n                if k.startswith(\"tmp_M_\"):\n                    nuke.thisNode()\[k].setValue(True)\"\"\"\n                            enable_material_group = nuke.PyScript_Knob('tmp_enable_material_group', 'Enable Material Group', code)\n                            THIS_GROUP.addKnob(enable_material_group)\n                            code = \"\"\"for k in nuke.thisNode().knobs():\n                if k.startswith(\"tmp_M_\"):\n                    nuke.thisNode()\[k].setValue(False)\"\"\"\n                            disable_material_group = nuke.PyScript_Knob('tmp_disable_material_group', 'Disable Material Group',\n                                                                        code)\n                            THIS_GROUP.addKnob(disable_material_group)\n                        THIS_GROUP.addKnob(knob)\n                        THIS_GROUP\[TMP_PREFIX + n].setValue(True)\n                        if not channelLayers\[index + 1].startswith('M_'):\n                            end_material_group = nuke.Tab_Knob('tmp_end_material_group', None, nuke.TABENDGROUP)\n                            THIS_GROUP.addKnob(end_material_group)\n\n                    elif n.startswith('crypto'):\n                        if not channelLayers\[index - 1].startswith('crypto'):\n                            begin_crypto_group = nuke.Tab_Knob('tmp_crypto_group', 'Crypto Group', nuke.TABBEGINGROUP)\n                            THIS_GROUP.addKnob(begin_crypto_group)\n                            code = \"\"\"for k in nuke.thisNode().knobs():\n                if k.startswith(\"tmp_crypto\"):\n                    nuke.thisNode()\[k].setValue(True)\"\"\"\n                            enable_crypto_group = nuke.PyScript_Knob('tmp_enable_crypto_group', 'Enable Crypto Group', code)\n                            THIS_GROUP.addKnob(enable_crypto_group)\n                            code = \"\"\"for k in nuke.thisNode().knobs():\n                if k.startswith(\"tmp_crypto\"):\n                    nuke.thisNode()\[k].setValue(False)\"\"\"\n                            disable_crypto_group = nuke.PyScript_Knob('tmp_disable_crypto_group', 'Disable Crypto Group', code)\n                            THIS_GROUP.addKnob(disable_crypto_group)\n                        THIS_GROUP.addKnob(knob)\n                        THIS_GROUP\[TMP_PREFIX + n].setValue(True)\n                        if not channelLayers\[index + 1].startswith('crypto'):\n                            end_crypto_group = nuke.Tab_Knob('tmp_end_crypto_group', None, nuke.TABENDGROUP)\n                            THIS_GROUP.addKnob(end_crypto_group)\n                    else:\n                        THIS_GROUP.addKnob(knob)\n                        THIS_GROUP\[TMP_PREFIX + n].setValue(True)\n\n                    # linking merge with checkboxes with expression\n                    merge\['disable'].setExpression(\"!\{0\}\{1\}\".format(TMP_PREFIX, n))\n\n                    # setting output node position\n                    if index == (channel_num - 1):\n                        end_dot\['xpos'].setValue(int(start_dot\['xpos'].value()))\n                        end_dot\['ypos'].setValue(int(new_merge\['ypos'].value()) + (Y_DIST * 8))\n                        end_dot.setSelected(SELECT_VAL)\n                        end_dot.setInput(0, new_merge)\n                        reformat_to_scale\['xpos'].setValue(int(crop_to_format\['xpos'].value()))\n                        reformat_to_scale\['ypos'].setValue(int(end_dot\['ypos'].value()) + (Y_DIST * 8))\n                        output\['xpos'].setValue(int(crop_to_format\['xpos'].value()))\n                        output\['ypos'].setValue(int(reformat_to_scale\['ypos'].value()) + (Y_DIST * 8))\n\n                # setting dynamic aov number value\n                proxy\['aov_num'].setExpression('\\n+\\n'.join(layer_list_expression))\n\n                # adding version and credit text knobs\n                version_knob = nuke.Text_Knob('tmp_version', '')\n                THIS_GROUP.addKnob(version_knob)\n                version_knob.setValue('<font color=#808080 size=\\\"5\\\" >1.0 BETA version</font>')\n\n                credit_knob = nuke.Text_Knob('tmp_version', '')\n                THIS_GROUP.addKnob(credit_knob)\n                credit_knob.setValue('<font color=#808080 size=\\\"3\\\">AOV_ContactSheet by Attila Gasparetz 2023</font>')\n" +STARTLINE}
 addUserKnob {26 space l "" -STARTLINE T "     "}
 addUserKnob {22 delete l "<b>Delete Layers" t "Deletes the setup within the Group and the AOV named checkboxes." -STARTLINE T "THIS_GROUP = nuke.thisNode()\ndef delete_tmp():\n    THIS_GROUP = nuke.thisNode()\n    TMP_PREFIX = \"tmp_\"\n    with THIS_GROUP:\n        for n in nuke.allNodes():\n            try:\n                n_name = n\['name'].value()\n                if n_name.startswith(TMP_PREFIX):\n                    nuke.delete(n)\n            except:\n                pass\n    for k in THIS_GROUP.knobs():\n        try:\n            if k.startswith(TMP_PREFIX):\n                THIS_GROUP.removeKnob(THIS_GROUP\[k])\n        except:\n            pass\n    for k in THIS_GROUP.knobs():\n        try:\n            if k.startswith(TMP_PREFIX):\n                THIS_GROUP.removeKnob(THIS_GROUP\[k])\n        except:\n            pass\n    for k in THIS_GROUP.knobs():\n        try:\n            if k.startswith(TMP_PREFIX):\n                THIS_GROUP.removeKnob(THIS_GROUP\[k])\n        except:\n            pass\ndelete_tmp()\nTHIS_GROUP\['enable_all_layers'].setVisible(False)\nTHIS_GROUP\['disable_all_layers'].setVisible(False)\n\nversion_knob = nuke.Text_Knob('tmp_version', '')\nTHIS_GROUP.addKnob(version_knob)\nversion_knob.setValue('<font color=#808080 size=\\\"5\\\" >1.0 BETA version</font>')\n\ncredit_knob = nuke.Text_Knob('tmp_version', '')\nTHIS_GROUP.addKnob(credit_knob)\ncredit_knob.setValue('<font color=#808080 size=\\\"3\\\">AOV_ContactSheet by Attila Gasparetz 2023</font>')\n"}
 addUserKnob {22 enable_all_layers l "Enable All Layers" +HIDDEN T "for k in nuke.thisNode().knobs():\n    if k.startswith(\"tmp_\"):\n        try:\n            nuke.thisNode()\[k].setValue(True)\n        except:\n            pass" +STARTLINE}
 addUserKnob {22 disable_all_layers l "Disable All Layers" -STARTLINE +HIDDEN T "for k in nuke.thisNode().knobs():\n    if k.startswith(\"tmp_\"):\n        try:\n            nuke.thisNode()\[k].setValue(False)\n        except:\n            pass"}
 addUserKnob {26 tmp_version l "" +STARTLINE T "<font color=#808080 size=\"5\" >1.0 BETA version</font>"}
 addUserKnob {26 tmp_version l "" +STARTLINE T "<font color=#808080 size=\"3\">AOV_ContactSheet by Attila Gasparetz 2023</font>"}
}
 Input {
  inputs 0
  name Input
  xpos 400
  ypos -489
 }
 Dot {
  name START_DOT
  label "\[value name]"
  note_font_size 22
  xpos 434
  ypos -342
 }
set N13355160 [stack 0]
 Remove {
  name Remove_ALL
  xpos 400
  ypos -279
 }
 Shuffle2 {
  fromInput1 {{0} B}
  fromInput2 {{0} B}
  mappings "4 black -1 -1 rgba.red 0 0 black -1 -1 rgba.green 0 1 black -1 -1 rgba.blue 0 2 black -1 -1 rgba.alpha 0 3"
  name Shuffle_KEEP_RGB
  label "\[value in1]"
  xpos 400
  ypos -207
 }
 Crop {
  box {0 0 {"\[if \{\[value proxy.aov_num]==0\} \{return input.width\} \{return input.width*proxy.grid_val\}]\n"} {"\[if \{\[value proxy.aov_num]==0\} \{return input.height\} \{return input.height*proxy.grid_val\}]\n"}}
  reformat true
  crop false
  name Crop_TO_FORMAT
  label "Box: x:\[value box.x]  y:\[value box.y] r:\[value box.r] t:\[value box.t]"
  xpos 400
  ypos -135
 }
 Dot {
  name END_DOT
  label "\[value name]\n\n"
  note_font_size 22
  xpos 434
  ypos 7296
 }
 Reformat {
  type scale
  scale {{format_scale}}
  name Reformat_TO_SCALE
  label "\[if \{\[value this.type]==\"scale\"\} \{return \"Scale: \[value this.scale]\"\} \{return \"\"\}]\n"
  xpos 400
  ypos 7488
 }
 Output {
  name Output1
  xpos 400
  ypos 7680
 }
push $N13355160
 NoOp {
  name proxy
  xpos 180
  ypos -345
  addUserKnob {20 User}
  addUserKnob {7 aov_num l "AOV NUM" R 0 100}
  aov_num {{"\[if \{\[value tmp_Merge_1.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_2.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_3.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_4.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_5.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_6.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_7.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_8.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_9.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_10.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_11.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_12.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_13.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_14.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_15.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_16.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_17.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_18.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_19.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_20.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_21.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_22.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_23.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_24.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_25.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_26.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_27.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_28.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_29.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_30.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_31.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_32.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_33.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_34.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_35.disable]==true\} \{return 0\} \{return 1\}]\n+\n\[if \{\[value tmp_Merge_36.disable]==true\} \{return 0\} \{return 1\}]"}}
  addUserKnob {7 grid_val l GRID_VAL R 0 100}
  grid_val {{"\[expr \{int( ceil ( (\[numvalue aov_num] /(sqrt( \[numvalue aov_num] )) )) )\} ]"}}
  addUserKnob {7 scale l SCALE R 0 2}
  scale {{1/grid_val}}
  addUserKnob {26 text_settings l "<b>Text Settings"}
  addUserKnob {4 text_pos l "Text Position" M {"Top Left" "Top Right" "Bottom Left" "Bottom Right"}}
  text_pos "Top Right"
  addUserKnob {7 font_scale l "Font Scale" R 0 2}
  font_scale 2
  addUserKnob {6 background l Background +STARTLINE}
  addUserKnob {19 bg_color l "BG Color"}
  bg_color {0 0 0 1}
  addUserKnob {6 bg_color_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {7 bg_opacity l "BG Opacity"}
  bg_opacity 1
  addUserKnob {26 grid_settings l "<b>Grid Settings"}
  addUserKnob {7 resMult l "Resolution Multiplier" R 0 2}
  resMult 1
  addUserKnob {7 border l Border R 0 40}
  border 20
 }
end_group
